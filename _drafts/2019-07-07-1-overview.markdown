<head>
    <script src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" type="text/javascript"></script>
    <script type="text/x-mathjax-config">
            MathJax.Hub.Config({
                    tex2jax: {
                    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],
                    inlineMath: [['$','$']]
                    }
                });
    </script>
</head>



## 1 什么是语音唤醒
语音唤醒，或者说关键词检测，是语音识别任务的一个分支，需要从一串语音流里检测出有限个预先定义的激活词或者关键词，而不需要对所有的语音进行识别。这类技术是使能嵌入式设备语音交互能力的基础，可以被应用到各种领域，比如手机，智能音箱，机器人，智能家居，车载设备，可穿戴设备等等。唤醒词预先设定，大部分中文唤醒词是四字，音节覆盖越多，音节差异越大，相对唤醒和误唤醒性能越好，也有些技术领先的算法公司可以做到三字或者二字唤醒词。当设备处于休眠状态时，持续拾音持续检测唤醒词，一旦检测到唤醒词，设备从休眠状态切换到工作状态等待后续交互。
作为一种基础应用，语音唤醒任务主要从两个维度考量
- 唤醒性能
唤醒性能主要包括召回率 True Positive Rate和虚警率 False Positive Rate。召回率是指正确识别的正例数据在实际正例数据中的百分比， 也就是正确被唤醒次数占总的应该被唤醒次数的百分比。虚警率是指错误识别的负例数据在实际负例数据中的百分比，也就是不该被唤醒却被唤醒的概率。这两者通常是此消彼长的关系，一个指标提升带来另一指标的下降。根据使用场景的不同，这两者的侧重点也会有所不同。
- 复杂度
复杂度主要体现在计算和内存开销上，因为设备处于持续拾音和持续检测的状态，需要较低的响应时延来保证用户体验，同时由于多数嵌入式设备依赖电池，较低的功耗才能保证合理的待机时间，要求更少的计算和内存开销。



目前常用的系统框架主要有基于隐马尔科夫模型和基于神经网络两种。

- 基于隐马尔科夫模型

这种方法与传统LVCSR（大规模词表语音识别）方法类似，区别在于解码网络的大小。因为不需要识别所有语音，因此解码网络不需要包含字典所有词汇，只需要包含激活词，这样的网络会比语音识别的网络小很多，有针对性地对关键词进行解码，可选的路径就少了很多，解码的速度也会得到大幅度的提升。对于解码出来的候选再作一个判断。 
- 基于神经网络

随着机器学习在图像领域的日益流行，神经网络也逐渐应用到语音领域，相比于上一中方法，这里不再需要解码步骤，实现了端到端的输出，也就是输入语音，输出关键词。
​    ![kws-nn.png](/assets/overview/kws-nn.png)
这是目前主流的方法，具体方式是
1. 从语音信号里提取特征
2. 经过一个神经网络，输入语音特征，输出激活词后验概率
3. 对于后延概率做一个平滑，判决是否激活

我们将在下一章中重点讨论特征提取和神经网络结构。
